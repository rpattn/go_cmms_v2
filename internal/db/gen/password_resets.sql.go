// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: password_resets.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPasswordReset = `-- name: CreatePasswordReset :exec
INSERT INTO password_resets (token, user_id, expires_at)
VALUES ($1, $2, $3)
`

type CreatePasswordResetParams struct {
	Token     string             `db:"token" json:"token"`
	UserID    pgtype.UUID        `db:"user_id" json:"user_id"`
	ExpiresAt pgtype.Timestamptz `db:"expires_at" json:"expires_at"`
}

func (q *Queries) CreatePasswordReset(ctx context.Context, arg CreatePasswordResetParams) error {
	_, err := q.db.Exec(ctx, createPasswordReset, arg.Token, arg.UserID, arg.ExpiresAt)
	return err
}

const getPasswordReset = `-- name: GetPasswordReset :one
SELECT token, user_id, expires_at, used_at
FROM password_resets
WHERE token = $1
  AND used_at IS NULL
  AND expires_at > now()
`

func (q *Queries) GetPasswordReset(ctx context.Context, token string) (PasswordReset, error) {
	row := q.db.QueryRow(ctx, getPasswordReset, token)
	var i PasswordReset
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.ExpiresAt,
		&i.UsedAt,
	)
	return i, err
}

const usePasswordReset = `-- name: UsePasswordReset :exec
UPDATE password_resets
SET used_at = now()
WHERE token = $1
  AND used_at IS NULL
  AND expires_at > now()
`

func (q *Queries) UsePasswordReset(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, usePasswordReset, token)
	return err
}
