// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: orgs.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrg = `-- name: CreateOrg :one
INSERT INTO organisations (slug, name, ms_tenant_id)
VALUES ($1, $2, $3)
RETURNING id, slug, name, ms_tenant_id, created_at
`

type CreateOrgParams struct {
	Slug       string      `db:"slug" json:"slug"`
	Name       string      `db:"name" json:"name"`
	MsTenantID pgtype.Text `db:"ms_tenant_id" json:"ms_tenant_id"`
}

func (q *Queries) CreateOrg(ctx context.Context, arg CreateOrgParams) (Organisation, error) {
	row := q.db.QueryRow(ctx, createOrg, arg.Slug, arg.Name, arg.MsTenantID)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.MsTenantID,
		&i.CreatedAt,
	)
	return i, err
}

const findOrgByID = `-- name: FindOrgByID :one
SELECT id, slug, name, ms_tenant_id, created_at FROM organisations WHERE id = $1
`

func (q *Queries) FindOrgByID(ctx context.Context, id pgtype.UUID) (Organisation, error) {
	row := q.db.QueryRow(ctx, findOrgByID, id)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.MsTenantID,
		&i.CreatedAt,
	)
	return i, err
}

const findOrgBySlug = `-- name: FindOrgBySlug :one
SELECT id, slug, name, ms_tenant_id, created_at FROM organisations WHERE slug = $1
`

func (q *Queries) FindOrgBySlug(ctx context.Context, slug string) (Organisation, error) {
	row := q.db.QueryRow(ctx, findOrgBySlug, slug)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.MsTenantID,
		&i.CreatedAt,
	)
	return i, err
}

const findOrgByTenantID = `-- name: FindOrgByTenantID :one
SELECT id, slug, name, ms_tenant_id, created_at FROM organisations WHERE ms_tenant_id = $1
`

func (q *Queries) FindOrgByTenantID(ctx context.Context, msTenantID pgtype.Text) (Organisation, error) {
	row := q.db.QueryRow(ctx, findOrgByTenantID, msTenantID)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.MsTenantID,
		&i.CreatedAt,
	)
	return i, err
}
