// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_tables.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserTable = `-- name: CreateUserTable :one
WITH s AS (
  SELECT trim(both '-' from regexp_replace(lower($1::text), '[^a-z0-9]+', '-', 'g')) AS slug
), ins AS (
  INSERT INTO app.tables (org_id, name, slug)
  SELECT $2::uuid, $1::text, s.slug FROM s
  ON CONFLICT (org_id, slug) DO NOTHING
  RETURNING id, name, slug, created_at
)
SELECT true AS created, id, name, slug, created_at FROM ins
UNION ALL
SELECT false AS created, t.id, t.name, t.slug, t.created_at
FROM app.tables t
JOIN s ON s.slug = t.slug
WHERE t.org_id = $2::uuid
LIMIT 1
`

type CreateUserTableParams struct {
	Name  string      `db:"name" json:"name"`
	OrgID pgtype.UUID `db:"org_id" json:"org_id"`
}

type CreateUserTableRow struct {
	Created   bool               `db:"created" json:"created"`
	ID        int64              `db:"id" json:"id"`
	Name      string             `db:"name" json:"name"`
	Slug      string             `db:"slug" json:"slug"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

func (q *Queries) CreateUserTable(ctx context.Context, arg CreateUserTableParams) (CreateUserTableRow, error) {
	row := q.db.QueryRow(ctx, createUserTable, arg.Name, arg.OrgID)
	var i CreateUserTableRow
	err := row.Scan(
		&i.Created,
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
	)
	return i, err
}

const getUserTableSchema = `-- name: GetUserTableSchema :many
WITH params AS (
  SELECT
    $1::text AS table_name,
    $2::uuid     AS org_id
),
table_id AS (
  SELECT id
  FROM app.tables t
  WHERE (t.slug = lower((SELECT table_name FROM params))
         OR lower(t.name) = lower((SELECT table_name FROM params)))
    AND (t.org_id = (SELECT org_id FROM params) OR t.org_id IS NULL)
  ORDER BY CASE WHEN t.org_id = (SELECT org_id FROM params) THEN 0 ELSE 1 END
  LIMIT 1
)
SELECT 
  c.id,
  c.name,
  c.type::text AS type,
  c.is_required,
  c.is_indexed,
  to_jsonb(c.enum_values) AS enum_values,
  c.is_reference,
  c.reference_table_id,
  c.require_different_table
FROM app.columns c
WHERE c.table_id = (SELECT id FROM table_id)
ORDER BY c.id ASC
`

type GetUserTableSchemaParams struct {
	TableName string      `db:"table_name" json:"table_name"`
	OrgID     pgtype.UUID `db:"org_id" json:"org_id"`
}

type GetUserTableSchemaRow struct {
	ID                    int64       `db:"id" json:"id"`
	Name                  string      `db:"name" json:"name"`
	Type                  string      `db:"type" json:"type"`
	IsRequired            bool        `db:"is_required" json:"is_required"`
	IsIndexed             bool        `db:"is_indexed" json:"is_indexed"`
	EnumValues            []byte      `db:"enum_values" json:"enum_values"`
	IsReference           bool        `db:"is_reference" json:"is_reference"`
	ReferenceTableID      pgtype.Int8 `db:"reference_table_id" json:"reference_table_id"`
	RequireDifferentTable bool        `db:"require_different_table" json:"require_different_table"`
}

func (q *Queries) GetUserTableSchema(ctx context.Context, arg GetUserTableSchemaParams) ([]GetUserTableSchemaRow, error) {
	rows, err := q.db.Query(ctx, getUserTableSchema, arg.TableName, arg.OrgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserTableSchemaRow
	for rows.Next() {
		var i GetUserTableSchemaRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.IsRequired,
			&i.IsIndexed,
			&i.EnumValues,
			&i.IsReference,
			&i.ReferenceTableID,
			&i.RequireDifferentTable,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserTables = `-- name: ListUserTables :many
SELECT id, name, slug, created_at
FROM app.tables
WHERE org_id = $1::uuid
ORDER BY created_at DESC, id DESC
`

type ListUserTablesRow struct {
	ID        int64              `db:"id" json:"id"`
	Name      string             `db:"name" json:"name"`
	Slug      string             `db:"slug" json:"slug"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
}

func (q *Queries) ListUserTables(ctx context.Context, orgID pgtype.UUID) ([]ListUserTablesRow, error) {
	rows, err := q.db.Query(ctx, listUserTables, orgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserTablesRow
	for rows.Next() {
		var i ListUserTablesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUserTable = `-- name: SearchUserTable :many
WITH params AS (
  SELECT
    $1::text AS table_name,
    $2::jsonb   AS p,
    $3::uuid     AS org_id
),
table_id AS (
  SELECT id
  FROM app.tables t
  WHERE (t.slug = lower((SELECT table_name FROM params))
         OR lower(t.name) = lower((SELECT table_name FROM params)))
    AND (t.org_id = (SELECT org_id FROM params) OR t.org_id IS NULL)
  ORDER BY CASE WHEN t.org_id = (SELECT org_id FROM params) THEN 0 ELSE 1 END
  LIMIT 1
),
page AS (
  SELECT
    GREATEST(0, COALESCE((p->>'pageNum')::int, 0))                AS page_num,
    GREATEST(1, LEAST(COALESCE((p->>'pageSize')::int, 10), 100)) AS page_size
  FROM params
),
ff AS (
  SELECT jsonb_array_elements(p->'filterFields') AS f
  FROM params
  WHERE (p ? 'filterFields') AND jsonb_typeof(p->'filterFields') = 'array'
),
filtered AS (
  SELECT 
    b.id,
    app.row_to_json(b.id) as data,
    COUNT(*) OVER() AS total_count
  FROM app.rows b
  WHERE b.table_id = (SELECT id FROM table_id)
  AND EXISTS (
    SELECT 1
    FROM ff
    LEFT JOIN app.columns c ON c.table_id = (SELECT id FROM table_id)
      AND lower(c.name) = lower(f->>'field')
    WHERE 
      CASE
        WHEN c.type = 'text' THEN EXISTS (
          SELECT 1 FROM app.values_text vt
          WHERE vt.row_id = b.id AND vt.column_id = c.id AND (
            CASE COALESCE(f->>'operation','eq')
              WHEN 'eq' THEN vt.value = (f->>'value')
              WHEN 'cn' THEN vt.value ILIKE '%' || (f->>'value') || '%'
              WHEN 'in' THEN vt.value = ANY(ARRAY(SELECT jsonb_array_elements_text(f->'values')))
              ELSE TRUE
            END
          )
        )
        WHEN c.type = 'enum' THEN EXISTS (
          SELECT 1 FROM app.values_enum ve
          WHERE ve.row_id = b.id AND ve.column_id = c.id AND (
            CASE COALESCE(f->>'operation','eq')
              WHEN 'eq' THEN ve.value = (f->>'value')
              WHEN 'in' THEN ve.value = ANY(ARRAY(SELECT jsonb_array_elements_text(f->'values')))
              ELSE TRUE
            END
          )
        )
        WHEN c.type = 'bool' THEN EXISTS (
          SELECT 1 FROM app.values_bool vb
          WHERE vb.row_id = b.id AND vb.column_id = c.id 
          AND vb.value IS NOT DISTINCT FROM ((f->>'value')::boolean)
        )
        ELSE TRUE
      END
  )
)
SELECT 
  f.id AS row_id,
  f.data,
  f.total_count
FROM filtered f
ORDER BY f.id DESC
LIMIT (SELECT page_size FROM page)
OFFSET (SELECT page_size * page_num FROM page)
`

type SearchUserTableParams struct {
	TableName string      `db:"table_name" json:"table_name"`
	Payload   []byte      `db:"payload" json:"payload"`
	OrgID     pgtype.UUID `db:"org_id" json:"org_id"`
}

type SearchUserTableRow struct {
	RowID      pgtype.UUID `db:"row_id" json:"row_id"`
	Data       []byte      `db:"data" json:"data"`
	TotalCount int64       `db:"total_count" json:"total_count"`
}

func (q *Queries) SearchUserTable(ctx context.Context, arg SearchUserTableParams) ([]SearchUserTableRow, error) {
	rows, err := q.db.Query(ctx, searchUserTable, arg.TableName, arg.Payload, arg.OrgID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchUserTableRow
	for rows.Next() {
		var i SearchUserTableRow
		if err := rows.Scan(&i.RowID, &i.Data, &i.TotalCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
