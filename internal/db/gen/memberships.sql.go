// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: memberships.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const ensureMembership = `-- name: EnsureMembership :one
INSERT INTO org_memberships (org_id, user_id, role)
VALUES ($1, $2, $3)
ON CONFLICT (org_id, user_id)
DO UPDATE SET role = EXCLUDED.role
RETURNING role::text AS role
`

type EnsureMembershipParams struct {
	OrgID  pgtype.UUID `db:"org_id" json:"org_id"`
	UserID pgtype.UUID `db:"user_id" json:"user_id"`
	Role   interface{} `db:"role" json:"role"`
}

func (q *Queries) EnsureMembership(ctx context.Context, arg EnsureMembershipParams) (string, error) {
	row := q.db.QueryRow(ctx, ensureMembership, arg.OrgID, arg.UserID, arg.Role)
	var role string
	err := row.Scan(&role)
	return role, err
}

const getRole = `-- name: GetRole :one
SELECT role::text AS role
FROM org_memberships
WHERE org_id = $1 AND user_id = $2
`

type GetRoleParams struct {
	OrgID  pgtype.UUID `db:"org_id" json:"org_id"`
	UserID pgtype.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) GetRole(ctx context.Context, arg GetRoleParams) (string, error) {
	row := q.db.QueryRow(ctx, getRole, arg.OrgID, arg.UserID)
	var role string
	err := row.Scan(&role)
	return role, err
}

const listUserOrgs = `-- name: ListUserOrgs :many
SELECT 
  o.id,
  o.slug,
  o.name,
  o.ms_tenant_id,
  o.created_at,
  m.role::text AS role
FROM org_memberships m
JOIN organisations o ON o.id = m.org_id
WHERE m.user_id = $1
ORDER BY o.created_at ASC
`

type ListUserOrgsRow struct {
	ID         pgtype.UUID        `db:"id" json:"id"`
	Slug       string             `db:"slug" json:"slug"`
	Name       string             `db:"name" json:"name"`
	MsTenantID pgtype.Text        `db:"ms_tenant_id" json:"ms_tenant_id"`
	CreatedAt  pgtype.Timestamptz `db:"created_at" json:"created_at"`
	Role       string             `db:"role" json:"role"`
}

func (q *Queries) ListUserOrgs(ctx context.Context, userID pgtype.UUID) ([]ListUserOrgsRow, error) {
	rows, err := q.db.Query(ctx, listUserOrgs, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserOrgsRow
	for rows.Next() {
		var i ListUserOrgsRow
		if err := rows.Scan(
			&i.ID,
			&i.Slug,
			&i.Name,
			&i.MsTenantID,
			&i.CreatedAt,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pickUserOrg = `-- name: PickUserOrg :one
SELECT o.id, o.slug, o.name, o.ms_tenant_id, o.created_at
FROM org_memberships m
JOIN organisations o ON o.id = m.org_id
WHERE m.user_id = $1
ORDER BY m.role DESC, o.created_at ASC
LIMIT 1
`

func (q *Queries) PickUserOrg(ctx context.Context, userID pgtype.UUID) (Organisation, error) {
	row := q.db.QueryRow(ctx, pickUserOrg, userID)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Slug,
		&i.Name,
		&i.MsTenantID,
		&i.CreatedAt,
	)
	return i, err
}

const updateRole = `-- name: UpdateRole :exec
UPDATE org_memberships
SET role = $3
WHERE org_id = $1 AND user_id = $2
`

type UpdateRoleParams struct {
	OrgID  pgtype.UUID `db:"org_id" json:"org_id"`
	UserID pgtype.UUID `db:"user_id" json:"user_id"`
	Role   interface{} `db:"role" json:"role"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.Exec(ctx, updateRole, arg.OrgID, arg.UserID, arg.Role)
	return err
}
