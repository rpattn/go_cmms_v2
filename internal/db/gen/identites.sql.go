// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: identites.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getUserByIdentity = `-- name: GetUserByIdentity :one
SELECT u.id, u.email, u.name, u.avatar_url, u.phone, u.country, u.created_at
FROM identities i
JOIN users u ON u.id = i.user_id
WHERE i.provider = $1 AND i.subject = $2
`

type GetUserByIdentityParams struct {
	Provider string `db:"provider" json:"provider"`
	Subject  string `db:"subject" json:"subject"`
}

func (q *Queries) GetUserByIdentity(ctx context.Context, arg GetUserByIdentityParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByIdentity, arg.Provider, arg.Subject)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.AvatarUrl,
		&i.Phone,
		&i.Country,
		&i.CreatedAt,
	)
	return i, err
}

const linkIdentity = `-- name: LinkIdentity :exec
INSERT INTO identities (user_id, provider, subject)
VALUES ($1, $2, $3)
ON CONFLICT (provider, subject)
DO NOTHING
`

type LinkIdentityParams struct {
	UserID   pgtype.UUID `db:"user_id" json:"user_id"`
	Provider string      `db:"provider" json:"provider"`
	Subject  string      `db:"subject" json:"subject"`
}

func (q *Queries) LinkIdentity(ctx context.Context, arg LinkIdentityParams) error {
	_, err := q.db.Exec(ctx, linkIdentity, arg.UserID, arg.Provider, arg.Subject)
	return err
}

const listIdentitiesForUser = `-- name: ListIdentitiesForUser :many
SELECT provider, subject
FROM identities
WHERE user_id = $1
ORDER BY provider, subject
`

type ListIdentitiesForUserRow struct {
	Provider string `db:"provider" json:"provider"`
	Subject  string `db:"subject" json:"subject"`
}

func (q *Queries) ListIdentitiesForUser(ctx context.Context, userID pgtype.UUID) ([]ListIdentitiesForUserRow, error) {
	rows, err := q.db.Query(ctx, listIdentitiesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListIdentitiesForUserRow
	for rows.Next() {
		var i ListIdentitiesForUserRow
		if err := rows.Scan(&i.Provider, &i.Subject); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
