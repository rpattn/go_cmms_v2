// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: local_auth.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLocalCredential = `-- name: CreateLocalCredential :exec
INSERT INTO local_credentials (user_id, username, password_hash)
VALUES ($1, LOWER($2), $3)
`

type CreateLocalCredentialParams struct {
	UserID       pgtype.UUID `db:"user_id" json:"user_id"`
	Lower        string      `db:"lower" json:"lower"`
	PasswordHash string      `db:"password_hash" json:"password_hash"`
}

func (q *Queries) CreateLocalCredential(ctx context.Context, arg CreateLocalCredentialParams) error {
	_, err := q.db.Exec(ctx, createLocalCredential, arg.UserID, arg.Lower, arg.PasswordHash)
	return err
}

const getLocalCredentialByUsername = `-- name: GetLocalCredentialByUsername :one
SELECT
  lc.user_id,
  lc.username,
  lc.password_hash,
  u.email,
  u.name
FROM local_credentials lc
JOIN users u ON u.id = lc.user_id
WHERE lc.username = LOWER($1)
`

type GetLocalCredentialByUsernameRow struct {
	UserID       pgtype.UUID `db:"user_id" json:"user_id"`
	Username     string      `db:"username" json:"username"`
	PasswordHash string      `db:"password_hash" json:"password_hash"`
	Email        string      `db:"email" json:"email"`
	Name         pgtype.Text `db:"name" json:"name"`
}

func (q *Queries) GetLocalCredentialByUsername(ctx context.Context, lower string) (GetLocalCredentialByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getLocalCredentialByUsername, lower)
	var i GetLocalCredentialByUsernameRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.PasswordHash,
		&i.Email,
		&i.Name,
	)
	return i, err
}

const updateLocalPasswordHash = `-- name: UpdateLocalPasswordHash :exec
UPDATE local_credentials
SET password_hash = $2,
    last_password_change = now()
WHERE user_id = $1
`

type UpdateLocalPasswordHashParams struct {
	UserID       pgtype.UUID `db:"user_id" json:"user_id"`
	PasswordHash string      `db:"password_hash" json:"password_hash"`
}

func (q *Queries) UpdateLocalPasswordHash(ctx context.Context, arg UpdateLocalPasswordHashParams) error {
	_, err := q.db.Exec(ctx, updateLocalPasswordHash, arg.UserID, arg.PasswordHash)
	return err
}
